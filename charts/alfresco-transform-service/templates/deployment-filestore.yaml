{{- if eq .Values.repository.edition "Enterprise" }}
{{- $componentScope := (dict "Values" (dict "nameOverride" "filestore" ) "Chart" .Chart "Release" .Release) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "alfresco-transform-service.fullname" $componentScope }}
  labels:
    {{- include "alfresco-transform-service.labels" $componentScope | nindent 4 }}
spec:
  replicas: {{ .Values.filestore.replicaCount }}
  selector:
    matchLabels:
      {{- include "alfresco-transform-service.selectorLabels" $componentScope | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      {{- toYaml .Values.global.strategy.rollingUpdate | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config-filestore.yaml") . | sha256sum }}
      labels:
        {{- include "alfresco-transform-service.selectorLabels" $componentScope | nindent 8 }}
    spec:
    {{- include "component-pod-security-context" .Values.filestore | indent 4 }}
    {{- if .Values.filestore.nodeSelector }}
      nodeSelector: {{- .Values.filestore.nodeSelector | toYaml | nindent 8 }}
    {{- end }}
      {{- include "alfresco-content-services.imagePullSecrets" . | indent 6 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ template "alfresco.shortname" . }}-filestore
              topologyKey: failure-domain.beta.kubernetes.io/zone
          - weight: 5
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ template "alfresco.shortname" . }}-filestore
              topologyKey: kubernetes.io/hostname
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.filestore.image.repository }}:{{ .Values.filestore.image.tag }}"
          imagePullPolicy: {{ .Values.filestore.image.pullPolicy }}
          {{- include "component-security-context" .Values.filestore | indent 8 }}
          envFrom:
          - configMapRef:
              name: {{ template "alfresco-transform-service.fullname" $componentScope }}
          ports:
            - containerPort: {{ .Values.filestore.image.internalPort }}
          resources: {{- toYaml .Values.filestore.resources | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.filestore.image.internalPort }}
            initialDelaySeconds: {{ .Values.filestore.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.filestore.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.filestore.readinessProbe.timeoutSeconds }}
          livenessProbe:
            httpGet:
              path: /live
              port: {{ .Values.filestore.image.internalPort }}
            initialDelaySeconds: {{ .Values.filestore.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.filestore.livenessProbe.periodSeconds }}
            failureThreshold: 1
            timeoutSeconds: {{ .Values.filestore.livenessProbe.timeoutSeconds }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.filestore.persistence.data.mountPath }}
              subPath: {{ .Values.filestore.persistence.data.subPath }}
      volumes:
      {{- include "data_volume" .Values.filestore | nindent 8 }}
{{- end }}

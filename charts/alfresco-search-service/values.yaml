---
# -- Define the type of Alfresco Search to use. The default is Alfresco Search
# Services.
# The type can be set to use Insight Engine with
# --set alfresco-search.type=insight-engine
# --set alfresco-search.global.alfrescoRegistryPullSecrets=quay-registry-secret
# --set alfresco-insight-zeppelin.enabled=true
# As the Docker Image for Insight Engine is not publicly available the
# alfrescoRegistryPullSecrets has to be set
# More information can be found on
# https://github.com/Alfresco/acs-deployment/blob/master/docs/helm/registry-authentication.md
type: search-services
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 33007
  runAsGroup: 33007
  fsGroup: 33007
searchServicesImage:
  repository: quay.io/alfresco/search-services
  tag: 2.0.8.2
  pullPolicy: &searchDockerImagePullPolicy IfNotPresent
  # -- container's port search service is listening on
  # change if your custom image use a different port.
  internalPort: null
insightEngineImage:
  repository: quay.io/alfresco/insight-engine
  tag: 2.0.8.2
  pullPolicy: *searchDockerImagePullPolicy
  # -- container's port search service is listening on
  # change if your custom image use a different port.
  internalPort: null
service:
  name: solr
  type: ClusterIP
  # -- Should you want to change the service port
  # externalPort: 80
ingress:
  # -- Expose the solr admin console behind basic auth
  enabled: false
  path: /solr
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  # -- Default solr basic auth user/password: admin / admin
  # You can create your own with htpasswd utilility & encode it with base640.
  # Example: `echo -n "$(htpasswd -nbm admin admin)" | base64 | tr -d '\n'`
  # basicAuth: YWRtaW46JGFwcjEkVVJqb29uS00kSEMuS1EwVkRScFpwSHB2a3JwTDd1Lg==
  basicAuth: null
  # -- An existing secret that contains an `auth` key with a value in the same
  # format of `ingress.basicAuth`
  existingSecretName: null
  # -- nginx ingress annotations (see
  # https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations)
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-realm: >-
      Authentication Required - Alfresco Search Services
    nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0
# Below values must be set by parent chart
repository:
  # -- Alfresco repository URL
  url: http://alfresco-search-service
  # -- repository security level to use when tracking the repo ('none' or 'secret')
  securecomms: secret
  # -- Shared secret used with repository when `securecomms` is `secret`
  sharedSecret: null
  existingSecret:
    # -- Alternatively, provide a pre-existing secret containing the shared secret used with repository when `securecomms` is `secret`
    name: null
    keys:
      # -- Key within the secret holding the repository shared secret
      sharedSecret: SOLR_ALFRESCO_SECURECOMMS_SECRET
  existingConfigMap:
    # -- Name of a pre-existing configmap containing Alfresco repository URL
    name: null
    keys:
      # -- Key within the configmap holding the repository hostname
      host: SOLR_ALFRESCO_HOST
      # -- Key within the configmap holding the repository port
      port: SOLR_ALFRESCO_PORT
      # -- Key within the configmap holding the repository security level
      securecomms: SOLR_ALFRESCO_SECURE_COMMS
environment:
  SOLR_CREATE_ALFRESCO_DEFAULTS: alfresco,archive

resources:
  requests:
    cpu: "0.50"
    memory: "1200Mi"
  limits:
    cpu: "4"
    memory: "2000Mi"

persistence:
  # -- When disabled, data is lost when pod is terminated/rescheduled
  enabled: true
  # -- Capacity of the PVC for persistency
  baseSize: 10Gi
  accessModes:
    - ReadWriteOnce
  # -- Bind PVC based on storageClass (e.g. dynamic provisioning)
  storageClass: null
  # -- Provide a pre-existing PVC for persistency
  existingClaim: null
  search:
    data:
      mountPath: "/opt/alfresco-search-services/data"
      subPath: "alfresco-content-services/solr-data"

alfresco-insight-zeppelin:
  enabled: false

readinessProbe:
  initialDelaySeconds: 60
  periodSeconds: 20
  timeoutSeconds: 10
livenessProbe:
  initialDelaySeconds: 130
  periodSeconds: 20
  timeoutSeconds: 10

initContainer:
  image:
    repository: busybox
    tag: 1.35.0
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: "5Mi"
    limits:
      memory: "10Mi"

global:
  alfrescoRegistryPullSecrets: quay-registry-secret


nodeSelector: {}
tolerations: []
affinity: {}

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use. If not set and create is true, a
  # name is generated using the fullname template
  name: ""

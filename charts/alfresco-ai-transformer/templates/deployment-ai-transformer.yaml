apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "alfresco-ai-transformer.fullname" . }}
  labels:
    {{- include "alfresco-ai-transformer.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "alfresco-ai-transformer.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      {{- toYaml .Values.strategy.rollingUpdate | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "alfresco-ai-transformer.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "alfresco-ai-transformer.serviceAccountName" . }}
      {{- include "alfresco-common.component-pod-security-context" .Values | indent 4 }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- .Values.nodeSelector | toYaml | nindent 8 }}
      {{- end }}
      {{- include "alfresco-common.imagePullSecrets" . | indent 6 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - {{ template "alfresco-ai-transformer.name" . }}
                    - key: app.kubernetes.io/instance
                      operator: In
                      values:
                        - {{ .Release.Name }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
            - weight: 5
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - {{ template "alfresco-ai-transformer.name" . }}
                    - key: app.kubernetes.io/instance
                      operator: In
                      values:
                        - {{ .Release.Name }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- include "alfresco-common.component-security-context" .Values | indent 8 }}
          envFrom:
          - configMapRef:
              name: {{ template "alfresco-ai-transformer.fullname" . }}
          env:
            {{- $mqSecretCtx := dict "Values" (dict "nameOverride" "ai-mq") "Chart" $.Chart "Release" $.Release }}
            {{- $mqSecret := coalesce .Values.messageBroker.existingSecret.name (include "alfresco-ai-transformer.fullname" $mqSecretCtx) }}
            {{- $awsSecretCtx := dict "Values" (dict "nameOverride" "aws-comprehend") "Chart" $.Chart "Release" $.Release }}
            {{- $awsSecret := coalesce .Values.aws.existingSecret.name (include "alfresco-ai-transformer.fullname" $awsSecretCtx) }}
            {{- $awsCmCtx := dict "Values" (dict "nameOverride" "aws-comprehend") "Chart" $.Chart "Release" $.Release }}
            {{- $awsCm := coalesce .Values.aws.existingConfigMap.name (include "alfresco-ai-transformer.fullname" $awsCmCtx) }}
            {{- $mqCmCtx := dict "Values" (dict "nameOverride" "ai-mq") "Chart" $.Chart "Release" $.Release }}
            {{- $mqCm := coalesce .Values.messageBroker.existingSecret.name (include "alfresco-ai-transformer.fullname" $mqCmCtx) }}
            {{- $sfsCmCtx := dict "Values" (dict "nameOverride" "ai-sfs") "Chart" .Chart "Release" .Release }}
            {{- $sfsCm := coalesce .Values.sfs.existingConfigMap.name (include "alfresco-ai-transformer.fullname" $sfsCmCtx) }}
            - name: BROKER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $mqSecret }}
                  key: {{ .Values.messageBroker.existingSecret.keys.username }}
            - name: BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $mqSecret }}
                  key: {{ .Values.messageBroker.existingSecret.keys.password }}
            - name: BROKER_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ $mqCm }}
                  key: {{ .Values.messageBroker.existingConfigMap.keys.url }}
            - name: FILE_STORE_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ $sfsCm }}
                  key: {{ .Values.sfs.existingConfigMap.keys.url }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ $awsSecret }}
                  key: {{ .Values.aws.existingSecret.keys.accessKeyId }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $awsSecret }}
                  key: {{ .Values.aws.existingSecret.keys.secretAccessKey }}
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: {{ $awsCm }}
                  key: {{ .Values.aws.existingConfigMap.keys.region }}
            - name: AWS_S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: {{ $awsCm }}
                  key: {{ .Values.aws.existingConfigMap.keys.s3Bucket }}
            - name: AWS_COMPREHEND_ROLE_ARN
              valueFrom:
                configMapKeyRef:
                  name: {{ $awsCm }}
                  key: {{ .Values.aws.existingConfigMap.keys.comprehendRoleARN }}

          ports:
              - containerPort: {{ .Values.image.internalPort }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.image.internalPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          livenessProbe:
            httpGet:
              path: /live
              port: {{ .Values.image.internalPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: 1
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}

---
suite: test repository manifest
templates:
  - deployment.yaml
  - configmap.yaml
  - pvc.yaml
tests:
  - it: should have basic metadata in place in deployment & default config
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-alfresco-activiti
        template: deployment.yaml
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ACTIVITI_DATASOURCE_URL
            valueFrom:
              configMapKeyRef:
                name: RELEASE-NAME-alfresco-activiti-database
                key: DATABASE_URL
        template: deployment.yaml
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ACTIVITI_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name: RELEASE-NAME-alfresco-activiti-database
                key: DATABASE_USERNAME
        template: deployment.yaml
  - it: should have basic metadata in place in deployment & default config
    set:
      existingConfigMap: apscfg
      database:
        existingConfigMap:
          name: my-own-custom-config
          keys:
            url: my-own-custom-url
        existingSecret:
          name: my-own-custom-secret
          keys:
            username: my-own-custom-username
            password: my-own-custom-password
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: apscfg
        template: deployment.yaml
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: RELEASE-NAME-alfresco-activiti
        template: deployment.yaml
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ACTIVITI_DATASOURCE_URL
            valueFrom:
              configMapKeyRef:
                name: my-own-custom-config
                key: my-own-custom-url
        template: deployment.yaml
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ACTIVITI_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name: my-own-custom-secret
                key: my-own-custom-username
        template: deployment.yaml
  - it: should have a default volume claim when not specifying an existing one
    set:
        persistence.enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: data
            mountPath: /usr/local/data
            subPath: alfresco-process-services/process-data
        template: deployment.yaml
      - equal:
          path: spec.template.spec.volumes[0].persistentVolumeClaim.claimName
          value: aps-default-pvc
        template: deployment.yaml
      - equal:
          path: metadata.name
          value: aps-default-pvc
        template: pvc.yaml
      - isNull:
          path: spec.storageClassName
        template: pvc.yaml
  - it: should set a specific storage class when set
    set:
      persistence.enabled: true
      persistence.storageClass: my-own-storage-class
    asserts:
      - equal:
          path: spec.storageClassName
          value: my-own-storage-class
        template: pvc.yaml
  - it: should override default volume claim when existing claim is provided
    set:
      persistence.enabled: true
      persistence.existingClaim: my-own-custom-pvc
    asserts:
      - isNotEmpty:
          path: spec.template.spec.containers[0].volumeMounts
        template: deployment.yaml
      - equal:
          path: spec.template.spec.volumes[0].persistentVolumeClaim.claimName
          value: my-own-custom-pvc
        template: deployment.yaml
      - hasDocuments:
          count: 0
        template: pvc.yaml
  - it: should not set license by default
    asserts:
      - isEmpty:
          path: spec.template.spec.volumes
        template: deployment.yaml
      - isEmpty:
          path: spec.template.spec.containers[0].volumeMounts
        template: deployment.yaml
  - it: should mount license secret when set
    set:
        license.secretName: my-own-custom-license
    asserts:
      - equal:
          path: spec.template.spec.volumes[0].secret.secretName
          value: my-own-custom-license
        template: deployment.yaml
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: license
        template: deployment.yaml

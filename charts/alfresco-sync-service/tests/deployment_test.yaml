---
suite: test deployment
templates:
  - deployment.yaml
  - config-syncservice.yaml
  - secret-database.yaml
  - serviceaccount.yaml
tests:
  - it: should render deployment with some defaults
    template: deployment.yaml
    values: &testvalues
      - values/test_values.yaml
    set: &values
      postgresql:
        enabled: true
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-alfresco-sync-service
      - equal:
          path: spec.template.spec.containers[0].resources
          value:
            requests:
              cpu: "0.5"
              memory: "800Mi"
            limits:
              cpu: "2"
              memory: "2000Mi"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_URL
            valueFrom:
              configMapKeyRef:
                name: RELEASE-NAME-alfresco-sync-database
                key: DATABASE_URL
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_DRIVER
            valueFrom:
              configMapKeyRef:
                name: RELEASE-NAME-alfresco-sync-database
                key: DATABASE_DRIVER
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: RELEASE-NAME-alfresco-sync-database
                key: DATABASE_USERNAME
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: RELEASE-NAME-alfresco-sync-database
                key: DATABASE_PASSWORD
  - it: should render deployment with pre-exisiting resources and without a service account
    values: *testvalues
    set:
      database:
        existingConfigMap:
          name: mydb
          keys:
            url: DBURL
            driver: DBDRIVER
        existingSecret:
          name: mydbcreds
          keys:
            username: DBUSER
            password: DBPASS
      serviceAccount:
        create: false
        name: null
    template: deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: default
      - hasDocuments:
          count: 0
        template: serviceaccount.yaml
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_URL
            valueFrom:
              configMapKeyRef:
                name: mydb
                key: DBURL
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_DRIVER
            valueFrom:
              configMapKeyRef:
                name: mydb
                key: DBDRIVER
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: mydbcreds
                key: DBUSER
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mydbcreds
                key: DBPASS

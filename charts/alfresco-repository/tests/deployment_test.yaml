---
suite: test repository manifest
templates:
  - deployment.yaml
values: &test_values
  - values/test_values.yaml
tests:
  - it: should have basic metadata in place in deployment
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-alfresco-repository
        template: deployment.yaml

  - it: should have default configmap in env
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: RELEASE-NAME-alfresco-opts
        template: deployment.yaml

  - it: should have a volume and a volumeMount for alfresco-global.properties
    set:
      configuration:
        repository:
          existingConfigMap: myprops
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: global-properties
            configMap:
              name: myprops
              defaultMode: 0400
              items:
                - key: alfresco-global.properties
                  path: alfresco-global.properties
        template: deployment.yaml
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: global-properties
            mountPath: /usr/local/tomcat/shared/classes/alfresco-global.properties
            subPath: alfresco-global.properties
            readOnly: true
        template: deployment.yaml

  - it: should render cpu and memory limits
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources
          value:
            requests:
              cpu: "250m"
              memory: "2Gi"
            limits:
              cpu: "4"
              memory: "8Gi"
        template: deployment.yaml

  - it: should have custom extra volumes when defined
    set:
      extraVolumes:
        - name: test-volume
          awsElasticBlockStore:
            volumeID: "whatever"
            fsType: ext4
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: test-volume
            awsElasticBlockStore:
              volumeID: "whatever"
              fsType: ext4
        template: deployment.yaml

  - it: should have custom secrets for license and subsytems
    set:
      configuration:
        repository:
          existingSecrets:
            - name: repository-secrets
              purpose: acs-license
              key: license.lic
            - name: myAzureAD
              purpose: subsystems:Authentication:ldap-ad
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content: &acsLicenseVol
            name: acs-license
            secret:
              defaultMode: 0400
              items:
              - key: license.lic
                path: license.lic
              optional: true
              secretName: repository-secrets
        template: deployment.yaml
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content: &acsLicenseMount
            name: acs-license
            mountPath: /usr/local/tomcat/shared/classes/alfresco/extension/license
            readOnly: true
        template: deployment.yaml
      - contains:
          path: spec.template.spec.volumes
          content:
            name: myAzureAD
            secret:
              secretName: myAzureAD
              defaultMode: 0400
        template: deployment.yaml
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: myAzureAD
            mountPath: /usr/local/tomcat/shared/classes/alfresco/extension/subsystems/Authentication/ldap-ad/myAzureAD
            readOnly: true
        template: deployment.yaml

  - it: should not have any license volume but vars instead
    set:
      configuration:
        repository:
          existingSecrets:
            - name: mysecret
              key: MYSECRETVAR
    asserts:
      - notContains:
          path: spec.template.spec.volumes
          content: *acsLicenseVol
        template: deployment.yaml
      - notContains:
          path: spec.template.spec.containers[0].volumeMounts
          content: *acsLicenseMount
        template: deployment.yaml
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MYSECRETVAR
            valueFrom:
              secretKeyRef:
                key: MYSECRETVAR
                name: mysecret
                optional: true
        template: deployment.yaml

  - it: should render default DATABASE URL
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_URL
            valueFrom:
              configMapKeyRef:
                name: RELEASE-NAME-alfresco-database
                key: DATABASE_URL

  - it: should render deployment using provided database cm
    set:
      configuration:
        db:
          existingConfigMap:
            name: mycm
            keys:
              url: DBURL
              driver: DBDRIVER
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_URL
            valueFrom:
              configMapKeyRef:
                name: mycm
                key: DBURL
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: DATABASE_DRIVER
            valueFrom:
              configMapKeyRef:
                name: mycm
                key: DBDRIVER

  - it: should deploy with extra containers
    values: *test_values
    set:
      extraInitContainers:
        - name: init1
          image: init:latest
      extraSideContainers:
        - name: sidecar1
          image: sidecar:latest
    asserts:
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 2
        template: deployment.yaml
      - lengthEqual:
          path: spec.template.spec.containers
          count: 2
        template: deployment.yaml

  - it: should allow setting nodeSelector properly
    values: *test_values
    set:
      nodeSelector:
        node_label: node_value
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector.node_label
          value: node_value
        template: deployment.yaml

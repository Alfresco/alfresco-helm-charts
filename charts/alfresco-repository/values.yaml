nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
resources: {}
nodeSelector: {}
tolerations: []
affinity: {}
repository:
  # -- Administrator password for ACS in NTLM hash format to set at bootstrap time
  adminPassword: "209c6174da490caeb422f3fa5a7ae634"
  # -- The name of the secret holding the ACS repository license if any.
  # it must be contained within a `data['*.lic']` property
  # For details on how to manage license, see:
  # https://github.com/Alfresco/acs-deployment/blob/master/docs/helm/examples/alf_license.md
  licenseSecret: null
  edition: Enterprise
  replicaCount: 2
  nodeSelector: {}
  strategy:
    type: Recreate
  image:
    repository: quay.io/alfresco/alfresco-content-repository
    tag: 7.4.0-M3
    pullPolicy: IfNotPresent
    internalPort: 8080
    hazelcastPort: 5701
  initContainers:
    db:
      image:
        repository: busybox
        tag: 1.35.0
        pullPolicy: IfNotPresent
      resources:
        limits:
          cpu: "0.25"
          memory: "10Mi"
  service:
    name: alfresco
    type: ClusterIP
    externalPort: &repositoryExternalPort 80
  ingress:
    path: /
    maxUploadSize: "5g"
    annotations: {}
    #   nginx.ingress.kubernetes.io/enable-cors: "true"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  environment:
    JAVA_OPTS: >-
      -Dtransform.service.enabled=true
      -XX:MinRAMPercentage=50
      -XX:MaxRAMPercentage=80
      -Dencryption.keystore.type=JCEKS
      -Dencryption.cipherAlgorithm=DESede/CBC/PKCS5Padding
      -Dencryption.keyAlgorithm=DESede
      -Dencryption.keystore.location=/usr/local/tomcat/shared/classes/alfresco/extension/keystore/keystore
      -Dmetadata-keystore.aliases=metadata
      -Dmetadata-keystore.metadata.algorithm=DESede
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 33000
    runAsGroup: 1000
    fsGroup: 1000
  resources:
    requests:
      cpu: "1"
      memory: "1500Mi"
    limits:
      cpu: "4"
      memory: "3000Mi"
  # -- The startup probe to cover the worse case startup time for slow clusters
  startupProbe:
    periodSeconds: 30
    failureThreshold: 10
  # The repository readiness probe is used to check startup only as a failure
  # of the liveness probe later will result in the pod being restarted.
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
  livenessProbe:
    initialDelaySeconds: 130
    periodSeconds: 20
    timeoutSeconds: 10
  persistence:
    # -- Persist repository data
    enabled: true
    baseSize: 20Gi
    # -- Specify a storageClass for dynamic provisioning
    accessModes:
      - ReadWriteMany
    # -- Bind PVC based on storageClass (e.g. dynamic provisioning)
    storageClass:
    # -- Use pre-provisioned pv through its claim (e.g. static provisioning)
    existingClaim:
    data:
      mountPath: /usr/local/tomcat/alf_data
      subPath: alfresco-content-services/repository-data
  extraVolumes: []
  extraVolumeMounts: []
  extraSideContainers: []
  extraInitContainers: []
  command: []
  # -- Provide additional log statements by adding classes and/or packages in a
  # key:value maner org.alfresco.repo.content.transform.TransformerDebug: debug
  extraLogStatements: {}
  # -- An existing secret that contains REPO_ADMIN_PASSWORD as an alternative for `repository.adminPassword` value
  existingSecretName:

apiexplorer:
  ingress:
    path: /api-explorer

# -- Define the alfresco-share properties to use in the k8s cluster
# This is the default presentation layer(UI) of Alfresco Content Services
share:
  replicaCount: 1
  nodeSelector: {}
  image:
    repository: quay.io/alfresco/alfresco-share
    tag: 7.4.0-M3
    pullPolicy: IfNotPresent
    internalPort: 8080
  service:
    name: share
    type: ClusterIP
    externalPort: 80
  ingress:
    path: /share
    annotations: {}
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  securityContext:
    runAsNonRoot: false
    capabilities:
      drop:
        - NET_RAW
        - ALL
  podSecurityContext:
    runAsNonRoot: true
  resources:
    requests:
      cpu: "1"
      memory: "512Mi"
    limits:
      cpu: "4"
      memory: "2000Mi"
  environment:
    CATALINA_OPTS: >-
      -XX:MinRAMPercentage=50
      -XX:MaxRAMPercentage=80
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 15
  livenessProbe:
    initialDelaySeconds: 200
    periodSeconds: 20
    timeoutSeconds: 10
  extraVolumeMounts: []
  extraVolumes: []
  extraSideContainers: []
  extraInitContainers: []
  command: []

# -- external activemq connection setting when activemq.enabled=false
messageBroker: &acs_messageBroker
  url: null
  user: null
  password: null
  # -- Name of the secret managed by this chart
  secretName: &acs_messageBroker_secretName acs-alfresco-cs-brokersecret
  # -- Alternatively, provide credentials via an existing secret that contains BROKER_URL, BROKER_USERNAME and BROKER_PASSWORD keys
  existingSecretName: null

postgresql:
  # -- Toggle embedded postgres for Alfresco Content Services repository
  # Check [PostgreSQL Bitnami chart
  # Documentation](https://github.com/bitnami/charts/tree/main/bitnami/postgresql)
  enabled: true
  nameOverride: postgresql-acs
  image:
    tag: 14.4.0
    pullPolicy: IfNotPresent
  commonAnnotations:
    application: alfresco-content-services
  auth:
    existingSecret:
    username: alfresco
    password: alfresco
    database: alfresco
  primary:
    extendedConfiguration: |
      max_connections = 250
      shared_buffers = 512MB
      effective_cache_size = 2GB
      wal_level = minimal
      max_wal_senders = 0
      max_replication_slots = 0
      log_min_messages = LOG
    resources:
      requests:
        cpu: "0.5"
        memory: "1500Mi"
      limits:
        cpu: "8"
        memory: "8192Mi"
    persistence:
      # -- set the storageClass to use for dynamic provisioning.
      # setting it to null means "default storageClass".
      storageClass: null
      # -- provide an existing persistent volume claim name to persist SQL data
      # Make sure the root folder has the appropriate permissions/ownhership set.
      existingClaim: null
      subPath: "alfresco-content-services/database-data"

s3connector:
  # -- Enable the S3 Connector
  # For a full list of properties on the S3 connector see:
  # https://docs.alfresco.com/s3connector/references/s3-contentstore-ref-config-props.html
  enabled: false
  config:
    bucketName:
    bucketLocation:
  secrets:
    accessKey:
    secretKey:
    encryption:
    awsKmsKeyId:
  # -- An existing kubernetes secret that contains ACCESSKEY, SECRETKEY, ENCRYPTION, KMSKEYID keys
  existingSecretName:

# -- For a full information of configuring the inbound email system, see
# https://docs.alfresco.com/content-services/latest/config/email/#manage-inbound-emails
# -- For a full information of configuring the inbound email system, see
# https://docs.alfresco.com/content-services/latest/config/email/#manage-inbound-emails
email:
  server:
    enabled: false
    port: 1125
    domain:
    enableTLS: true
    hideTLS: false
    requireTLS: false
    auth:
      enabled: true
    connections:
      max: 3
    allowed:
      senders: .*
    blocked:
      senders:
  inbound:
    enabled: false
    unknownUser: anonymous
    emailContributorsAuthority: EMAIL_CONTRIBUTORS
  handler:
    folder:
      overwriteDuplicates: true
  ssl:
    secretName:
  initContainers:
    pemToKeystore:
      image:
        repository: registry.access.redhat.com/redhat-sso-7/sso71-openshift
        tag: 1.1-16
        pullPolicy: IfNotPresent
    pemToTruststore:
      image:
        repository: registry.access.redhat.com/redhat-sso-7/sso71-openshift
        tag: 1.1-16
        pullPolicy: IfNotPresent
    setPerms:
      image:
        repository: busybox
        tag: 1.35.0
        pullPolicy: IfNotPresent
# -- For a full information of configuring the outbound email system, see
# https://docs.alfresco.com/content-services/latest/config/email/#manage-outbound-emails
mail:
  # -- SMTP(S) host server to enable delivery of site invitations, activity notifications and workflow tasks by email
  host:
  port: 25
  protocol: smtps
  encoding: UTF-8
  username:
  password:
  # -- An existing kubernetes secret that contains MAIL_PASSWORD as per `mail.password` value
  existingSecretName:
  from:
    # -- Specifies the email address from which email notifications are sent
    default:
    enabled: false
  smtp:
    auth: true
    debug: false
    timeout: 30000
    starttls:
      enable: true
  smtps:
    auth: true
    starttls:
      enable: true
# -- For a full information of configuring the imap subsystem, see
# https://docs.alfresco.com/content-services/latest/config/email/#enable-imap-protocol-using-alfresco-globalproperties
imap:
  server:
    enabled: false
    host: "0.0.0.0"
    port: 1143
    imap:
      enabled: true
    imaps:
      enabled: true
      port: 1144
  mail:
    from:
      default:
    to:
      default:

database:
  # -- Enable using an external database for Alfresco Content Services. Must disable `postgresql.enabled` when true.
  external: false
  # -- Postgresql jdbc driver name ex: org.postgresql.Driver. It should be available in the container image.
  driver:
  # -- External Postgresql database user
  user:
  # -- External Postgresql database password
  password:
  # -- External Postgresql jdbc url ex: `jdbc:postgresql://oldfashioned-mule-postgresql-acs:5432/alfresco`
  url:
  # -- Name of the secret managed by this chart
  secretName: &acs_database_secretName acs-alfresco-cs-dbsecret
  # -- An existing secret that contains DATABASE_USERNAME and DATABASE_PASSWORD keys.
  # When using embedded postgres you need to also set `postgresql.existingSecret`.
  existingSecretName:

alfresco-search:
  enabled: true
  # If an external Solr service is to be used then enabled must be set to false
  # and external has to be configured accordingly.
  external:
    # -- Host dns/ip of the external solr6 instance.
    host: null
    # -- Port of the external solr6 instance.
    port: null
  repository: &repositoryHostPort
    # The value for "host" is the name of this chart
    host: alfresco-cs
    port: *repositoryExternalPort
  service:
    externalPort: 9999

alfresco-search-enterprise:
  enabled: false

global:
  alfrescoRegistryPullSecrets: quay-registry-secret
  # A shared secret is now required in order to authenticate connections between
  # solr and repo (typically: tracking)
  tracking:
    # -- Select how solr and repo authenticate to each other
    # none: work only prior to acs 7.2 (and was the default)
    # secret: use a shared secret (to specify using `tracking.sharedsecret`)
    # https: to use mTLS auth (require appropriate certificate configuration)
    auth: secret
    # -- Shared secret to authenticate repo/solr traffic.
    # Strong enough secret can be generated with `openssl rand 20 -base64`
    sharedsecret: null
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  # -- Shared connections details for Elasticsearch/Opensearch cluster
  elasticsearch:
    # -- The host where service is available
    host: null
    # -- The port where service is available
    port: null
    # -- Valid values are http or https
    protocol: null
    # -- The username required to access the service, if any
    user: null
    # -- The password required to access the service, if any
    password: null
    # -- Alternatively, provide connection details via an existing secret that contains ELASTICSEARCH_USERNAME and ELASTICSEARCH_PASSWORD keys
    existingSecretName:

transformmisc:
  enabled: false

alfresco-sync-service:
  enabled: false

metadataKeystore:
  # keystorePassword: ""
  # keyPassword: ""
  defaultKeystorePassword: "mp6yc0UD9e"
  defaultKeyPassword: "oKIWzVdEdA"

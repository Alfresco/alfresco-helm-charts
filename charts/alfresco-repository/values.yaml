# Default values for alfresco-repository.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quay.io/alfresco/alfresco-content-repository
  pullPolicy: IfNotPresent
  tag: 23.1.0-A21
  port: 8080

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

db:
  # -- JDBC url of the database WITHOUT the "jdbc:" prefix
  # This is a mandatory parameter
  url: null
  # -- JDBC driver class of the driver if none is provided the it is guessed
  # from the URL provided
  driver: null
  # -- Username to authentication to the repository database
  username: null
  # -- Password to authentication to the repository database
  password: null
  # -- Existing secret and their keys where to find the database username &
  # password.
  existingSecret:
    # -- Name of a pre-existing secret containing database credentials
    name: null
    keys:
      # -- Key within the secret holding the database username
      username: DATABASE_USERNAME
      # -- Key within the secret holding the database password
      password: DATABASE_PASSWORD

configuration:
  repository:
    # -- a configmap containing the "alfresco-global.properties" key populated
    # with actual Alfresco repository properties
    existingConfigMap: null
    # -- A list of secrets to make available to the repo as env vars. It's also
    # used to pass the Alfresco license which will be mounted as a file when
    # the secret as the `purpose` value set to `acs-license`. Other secrets
    # will be used as env variables.
    existingSecrets:
      - name: repository-secrets
        key: license.lic
        purpose: acs-license
  messageBroker:
    # -- Message Broker URL
    url: null
    # -- Username to authenticate to the message broker
    username: null
    # -- Password to authenticate to the message broker
    password: null
    existingSecret:
      # -- Name of a pre-existing secret containing message broker credentials
      name: null
      keys:
        # -- Key within the secret holding the message broker username
        username: BROKER_USERNAME
        # -- Key within the secret holding the message broker password
        password: BROKER_PASSWORD
    existingConfigMap:
      # -- Name of a pre-existing configmap containing the meesage broker URL
      name: null
      keys:
        # -- Key within the configmap  holding the message broker URL. It MUST
        # be a failover URL as per the spec below:
        # https://activemq.apache.org/failover-transport-reference.html
        url: BROKER_URL

environment:
  # -- Java or Tomcat system properties. These properties must be provided as a
  # single string following the pattern "-Dproperty=value -Dmoreprop=morevalue".
  # They override the content of the global properties file but you should
  # prefer providing configuration.repository.existingConfigMap.
  CATALINA_OPTS: null
  # -- Set JVM options
  JAVA_OPTS: >-
    -XX:MaxRAMPercentage=80

persistence:
  # -- Persist Contentsotre data
  enabled: false
  baseSize: 20Gi
  # -- Specify a storageClass for dynamic provisioning
  accessModes:
    - ReadWriteMany
  # -- Bind PVC based on storageClass (e.g. dynamic provisioning)
  storageClass: null
  # -- Use pre-provisioned pv through its claim (e.g. static provisioning)
  existingClaim: null
  data:
    mountPath: /usr/local/tomcat/alf_data
    subPath: alfresco-content-services/repository-data

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "alfresco-repo-sa"

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 33000
  runAsGroup: 1000
  fsGroup: 1000

securityContext: {}

service:
  name: repository
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 5g
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "alfrescoRepo"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
  hosts:
    - paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    cpu: "250m"
    memory: "2Gi"
  limits:
    cpu: "4"
    memory: "8Gi"

startupProbe:
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 3
  httpGet:
    path: /alfresco/api/-default-/public/alfresco/versions/1/probes/-live-
    port: http
readinessProbe:
  periodSeconds: 20
  timeoutSeconds: 3
  httpGet:
    path: /alfresco/api/-default-/public/alfresco/versions/1/probes/-ready-
    port: http
livenessProbe:
  periodSeconds: 20
  timeoutSeconds: 3
  httpGet:
    path: /alfresco/api/-default-/public/alfresco/versions/1/probes/-live-
    port: http

extraVolumes: []
extraVolumeMounts: []
extraSideContainers: []
extraInitContainers: []
command: []
args: []

nodeSelector: {}

tolerations: []

affinity: {}

global:
  # -- If a private image registry a secret can be defined and passed to
  # kubernetes, see:
  # https://github.com/Alfresco/acs-deployment/blob/a924ad6670911f64f1bba680682d266dd4ea27fb/docs/helm/eks-deployment.md#docker-registry-secret
  alfrescoRegistryPullSecrets: quay-registry-secret
  # -- a fallback for .Values.known_urls that can be shared between charts
  known_urls:
